import cv2
import numpy as np
from tensorflow.keras.models import load_model

# Load the pre-trained model for emotion detection
model = load_model('emotion_model.hdf5')

# Define the emotions labels
emotion_labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

# Load the Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize the video capture
video_capture = cv2.VideoCapture(0)



while True:
    # Read the video frame
    ret, frame = video_capture.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Iterate over the detected faces
    for (x, y, w, h) in faces:
        # Extract the face region of interest
        face = gray[y:y + h, x:x + w]

        # Resize the face image to 48x48 pixels
        face = cv2.resize(face, (64, 64))

        # Normalize the face image
        face = face / 255.0

        # Reshape the face image for the model input
        face = np.reshape(face, (1, 64, 64, 1))

        # Predict the emotion using the pre-trained model
        emotion = model.predict(face)[0]

        # Get the predicted emotion label
        emotion_label = emotion_labels[np.argmax(emotion)]

        # Draw a rectangle around the face
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Display the predicted emotion label
        cv2.putText(frame, emotion_label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    # Display the resulting frame
    cv2.imshow('Facial Emotion Detection', frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close the window
video_capture.release()
cv2.destroyAllWindows()
